#include<stdio.h>
#include<stdlib.h>
#include<windows.h>
#include<conio.h>
#include<string.h>
#include<mysql.h>
#include<time.h>
//SQL ERROR FUNCTION
void finish_with_error(MYSQL*conn){
fprintf(stderr,"%s\n",mysql_error(conn));
mysql_close(conn);
exit(1);
}

int main(){
//SYSTEM COLOUR
system("COLOR 7A");
//CURRENT TIME
  time_t currentTime;
  time(&currentTime);
  time_t p=ctime(&currentTime);
  printf("\r \n%s\n",p);
//other variables
    int entry;
    int result;
    double average;
    int score=0;
    int mark=0;
    int Choice;
    int count=1;
    int n,i,j;
//DECLARATION OF MYSQL VARIABLES
MYSQL_RES *resultset;
MYSQL_RES *res;
MYSQL_ROW row;
MYSQL_RES*name;
char Fname[30], sqlquery[10];
char pass[10];
MYSQL * conn;
//database connection
  printf(" \n=========================================\n ");
  printf("=====KINDACARE CHARACTER SYSTEM======\n");
  printf(" \n==========================================\n ");
   conn = mysql_init(NULL);
   conn = mysql_real_connect(conn,"localhost","root","","kindercare",0,NULL,0);
   if(conn){
     printf("Database Connection Valid\n");
   }
   else {
     printf("not connected\n");
   }
   //LETTER STRUCT
    struct character{
    char letter;
    int position[7][5];
};

struct character guide[26]={
 {'A', {{0,0,1,0,0},{0,1,0,1,0},{1,0,0,0,1},{1,1,1,1,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1}}	},

	{'B',{{1,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,1},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,0}} },

	{'C', {{0,0,1,1,1},{0,1,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{0,1,0,0,0},{0,0,1,1,1}} },

	{'D',{{1,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,0}} },

	{'E',{{1,1,1,1,1},{1,0,0,0,0},{1,0,0,0,0},{1,1,1,1,1},{1,0,0,0,0},{1,0,0,0,0},{1,1,1,1,1}} },

	{'F', {{1,1,1,1,1},{1,0,0,0,0},{1,0,0,0,0},{1,1,1,1,1},{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0}} },

	{'G', {{0,0,1,1,1},{0,1,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,0,1,1,1},{1,0,0,0,1},{0,1,1,1,0}} },

	{'H', {{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1}} },

	{'I',{{1,1,1,1,1},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{1,1,1,1,1}} },

    {'J',{{1,1,1,1,1},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{1,0,1,0,0},{0,1,1,0,0}} },

    {'K',{{1,0,0,0,1},{1,0,0,1,0},{1,0,1,0,0},{1,1,0,0,0},{1,0,1,0,0},{1,0,0,1,0},{1,0,0,0,1}} },

    {'L',{{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,1,1,1,1}} },

    {'M',{{1,0,0,0,1},{1,1,0,1,1},{1,0,1,0,1},{1,0,1,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1}} },

    {'N',{{1,0,0,0,1},{1,1,0,0,1},{1,0,0,0,1},{1,0,1,0,1},{1,0,0,0,1},{1,0,0,1,1},{1,0,0,0,1}} },

    {'O',{{0,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{0,1,1,1,0}} },

    {'P',{{1,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,1},{1,0,0,0,0},{1,0,0,0,0},{1,0,0,0,0}} },

    {'Q',{{0,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{0,1,1,1,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,1}} },

    {'R',{{0,1,1,1,0},{1,0,0,0,1},{1,0,0,0,1},{1,1,1,1,0},{1,0,1,0,0},{1,0,0,1,0},{1,0,0,0,1}} },

    {'S',{{0,1,1,1,0},{1,0,0,0,0},{1,0,0,0,0},{0,1,1,1,0},{0,0,0,1,0},{0,0,0,1,0},{1,0,1,0,0}} },

    {'T',{{1,1,1,1,1},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0}} },

    {'U',{{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{0,1,1,1,0}} },

    {'V',{{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{0,1,0,1,0},{0,0,1,0,0}} },

    {'W',{{1,0,0,0,1},{1,0,0,0,1},{1,0,0,0,1},{1,0,1,0,1},{1,0,0,0,1},{1,1,0,1,1},{1,0,0,0,1}} },

    {'X',{{1,0,0,0,1},{0,1,0,1,0},{0,0,1,0,0},{0,0,1,0,0},{0,1,0,1,0},{1,0,0,0,1},{1,0,0,0,1}} },

    {'Y',{{1,0,0,0,1},{0,1,0,1,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0},{0,0,1,0,0}} },

    {'Z',{{1,1,1,1,1},{0,0,0,1,0},{0,0,1,0,0},{0,1,0,0,0},{1,0,0,0,0},{1,0,0,0,0},{1,1,1,1,1}}}
};
   //LETTER STRUCT
         printf("\n\t\tMENU\n1.VIEWALL\n2.CHECKSTATUS\n3.VIEWASSIGNMENT\n4.CHECKDATES\n5.REQUESTACTIVATION\n6.START\n7.DISPLAY\n");
    char choice[20];
     char a[20]="VIEWALL";
     char b[20]="CHECKSTATUS";
    char c[20]="VIEWASSIGNMENT";
    char d[20]="CHECKDATES";
    char e[20]="REQUESTACTIVATION";
    char f[10]="START";
    char g[10]="DISPLAY";
    printf("ENTER CHOICE FROM MENU:");
    scanf("%s",choice);
    /*VIEWALL*/
    if(strcmp(a,choice)==0){
            printf("\n________________________________________________________________\n");
        printf("\n |ASSIGNMENT_ID\t\t|DATE\t\t|ATTEMPTED\t\t|\n");
 printf("_________________________________________________________________\n");
   if(mysql_query(conn,"SELECT assign_id,VALID_DATE,attempted FROM great")){
    finish_with_error(conn);
   }
   res=mysql_store_result(conn);
   if(res==NULL){
    finish_with_error(conn);
   }
   int num_fields=mysql_num_fields(res);
   while((row=mysql_fetch_row(res))){
    for(int i=0;i<num_fields;i++){
    printf(" \t  %s\t",row[i]?row[i]:NULL);

      }

//printf("\n");
printf("\n__________________________________________________________________\n");
    }
   mysql_free_result(res);
        main();
    }
    /*CHECKSTATUS*/
    else if(strcmp(b,choice)==0){
        printf("\n|ASSIGNMENT_ID\t|ATTEMPTED\t|AVERAGE_SCORE\t|PERCENTAGE_MISSED\t|PERCENTAGE_ATTEMPTED\n");

   if(mysql_query(conn,"SELECT assign_id,attempted,average,percent_miss,percent_attempt FROM great")){
    finish_with_error(conn);
   }
   res=mysql_store_result(conn);
   if(res==NULL){
    finish_with_error(conn);
   }
   int num_fields=mysql_num_fields(res);
   while((row=mysql_fetch_row(res))){
for(int i=0;i<num_fields;i++){
 printf(" %s\t\t",row[i]?row[i]:NULL);

      }

//printf("\n");
    }
mysql_free_result(res);
        main();
        //END OF CHECKSTATUS
    }
    /*VIEWASSIGNMENT*/
    else if(strcmp(c,choice)==0){
        printf("\n |ASSIGNMENT_ID\t|DURATION\n");
          if(mysql_query(conn,"SELECT assign_id,DURATION FROM great")){
    finish_with_error(conn);
   }
   res=mysql_store_result(conn);
   if(res==NULL){
    finish_with_error(conn);
   }
   int num_fields=mysql_num_fields(res);
   while((row=mysql_fetch_row(res))){
   for(int i=0;i<num_fields;i++){
     printf("   %s\t\t",row[i]?row[i]:NULL);

      }

    //printf("\n");
    }
     mysql_free_result(res);
     main();

        //END OF VIEWASSIGNMENT
    }
    /*check date*/
    else if(strcmp(d,choice)==0){
        printf("\n |ASSIGNMENT_ID\t|VALID DATE\n");
              if(mysql_query(conn,"SELECT assign_id,VALID_DATE FROM great")){
    finish_with_error(conn);
   }
   res=mysql_store_result(conn);
   if(res==NULL){
    finish_with_error(conn);
   }
   int num_fields=mysql_num_fields(res);
   while((row=mysql_fetch_row(res))){
   for(int i=0;i<num_fields;i++){
     printf("   %s\t\t",row[i]?row[i]:NULL);

      }

//printf("\n");
    }
mysql_free_result(res);
        main();
        //CHECKDATES
    }
    else if(strcmp(e,choice)==0){
        printf("\n ACTIVATION REQUEST SENT TO TEACHER");
        //ACTIVATION REQUEST SENDING
        main();
        //REQUEST ACTIVATION
    }
    //ATTEMPT
    else if(strcmp(f,choice)==0){
     if(mysql_query(conn,"SELECT AssignmentID, C1,C2,C3,C4,C5,C6,C7,C8 FROM assignments ")){
      finish_with_error(conn);
    }
     res=mysql_store_result(conn);
   if(res==NULL){
    finish_with_error(conn);
   }
   printf("\n__________________________________________________________________\n");
   printf("AID\tC1\tC2\tC3\tC4\tC5\tC6\tC7\tC8\n");
   printf("__________________________________________________________________\n");
   int num_fields=mysql_num_fields(res);
   while((row=mysql_fetch_row(res))){
    for(int i=0;i<num_fields;i++){
        printf("%s\t",row[i]?row[i]:NULL);

      }

  printf("\n__________________________________________________________________\n");
    }
    printf("enter letter letter you drawing from assignment:");
        while ( ((Choice=getchar()) != EOF)&&(count<9) ){
    switch(Choice){
           case 'A':
            printf("Enter character");
            n=0;
            int E[7][5];
               printf("\n%s\n",&guide[n].letter);
            for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		printf("Enter 0 or 1 in position E[%d][%d]:",i,j);
		scanf("%d",&E[i][j]);
		fflush(stdin);
		}
		printf("\nEnter next row\n");
	}
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		if(E[i][j]==guide[n].position[i][j]){
            count++;
		 }
		}
	}
	//MARKS
	mark=(entry/35)*100;
	printf("%dentries\nYour character\n",entry);
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
            if(E[i][j]==1){
                       printf("*");
                }
                else{
                    printf(" ");
                }
		}
		printf("\n");
	}
               //printarray
               printf("\ncorrect character\n");
        for(i=0;i<7;i++){
            for(j=0;j<5;j++){
                if(guide[n].position[i][j]==1){
                    printf("*");
                }
                else{
                    printf(" ");
                }
            }
            printf("\n");
        }
        break;

        //FOR SECOND LETTER
         case 'B':
            n=1;
            int B[7][5];
               printf("\n%s\n",&guide[n].letter);
            for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		printf("Enter 0 or 1 in position E[%d][%d]:",i,j);
		scanf("%d",&B[i][j]);
		fflush(stdin);
		}
		printf("\nEnter next row\n");
	}
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		if(B[i][j]==guide[n].position[i][j]){
            count++;
		 }
		}
	}
	printf("%dentries\nYour character\n",entry);
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
            if(B[i][j]==1){
                       printf("*");
                }
                else{
                    printf(" ");
                }
		}
		printf("\n");
	}
               //printarray
               printf("\ncorrect character\n");
        for(i=0;i<7;i++){
            for(j=0;j<5;j++){
                if(guide[n].position[i][j]==1){
                    printf("*");
                }
                else{
                    printf(" ");
                }
            }
            printf("\n");
        }
     break;
     //letter c
     case 'C':
            n=2;
            int C[7][5];
               printf("\n%s\n",&guide[n].letter);
            for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		printf("Enter 0 or 1 in position E[%d][%d]:",i,j);
		scanf("%d",&C[i][j]);
		fflush(stdin);
		}
		printf("\nEnter next row\n");
	}
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		if(C[i][j]==guide[n].position[i][j]){
            count++;
		 }
		}
	}
	printf("%dentries\nYour character\n",entry);
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
            if(C[i][j]==1){
                       printf("*");
                }
                else{
                    printf(" ");
                }
		}
		printf("\n");
	}
               //printarray
               printf("\ncorrect character\n");
        for(i=0;i<7;i++){
            for(j=0;j<5;j++){
                if(guide[n].position[i][j]==1){
                    printf("*");
                }
                else{
                    printf(" ");
                }
            }
            printf("\n");
        }
     break;
     //LETTER 4
     case 'Z':
            n=25;
            int Z[7][5];
               printf("\n%s\n",&guide[n].letter);
            for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		printf("Enter 0 or 1 in position E[%d][%d]:",i,j);
		scanf("%d",&Z[i][j]);
		fflush(stdin);
		}
		printf("\nEnter next row\n");
	}
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
		if(Z[i][j]==guide[n].position[i][j]){
            count++;
		 }
		}
	}
	printf("%dentries\nYour character\n",entry);
	for(i=0;i<7;i++){
		for(j=0;j<5;j++){
            if(Z[i][j]==1){
                       printf("*");
                }
                else{
                    printf(" ");
                }
		}
		printf("\n");
	}
               //printarray
               printf("\ncorrect character\n");
        for(i=0;i<7;i++){
            for(j=0;j<5;j++){
                if(guide[n].position[i][j]==1){
                    printf("*");
                }
                else{
                    printf(" ");
                }
            }
            printf("\n");
        }
     break;


        }
        count++;
    }
    }
   // ATTEMPT
    else{
    printf("\tOOPS WRONG COMMAND!TRY AGAIN\n");
        main();
    }
    mysql_close(conn);
}
